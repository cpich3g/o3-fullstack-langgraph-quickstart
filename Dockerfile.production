# Use multi-stage build for better optimization
# Stage 1: Build React Frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files first for better caching
COPY frontend/package*.json ./

# Clear npm cache and install dependencies with proper platform targeting
RUN npm cache clean --force && \
    npm ci --include=dev --platform=linux --arch=x64

# Copy source and build
COPY frontend/ ./
RUN npm run build

# Stage 2: Python Backend with LangGraph
FROM docker.io/langchain/langgraph-api:3.11

# Install UV package manager
RUN apt-get update && apt-get install -y curl && \
    curl -LsSf https://astral.sh/uv/install.sh | sh && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
ENV PATH="/root/.local/bin:$PATH"

# Copy built frontend
COPY --from=frontend-builder /app/frontend/dist /deps/frontend/dist
COPY frontend/public /deps/frontend/public

# Copy backend code
COPY backend/ /deps/backend/

# Install Python dependencies with UV
RUN uv pip install --system pip setuptools wheel
RUN cd /deps/backend && \
    PYTHONDONTWRITEBYTECODE=1 UV_SYSTEM_PYTHON=1 uv pip install --system -c /api/constraints.txt -e .

# Set LangGraph environment variables
ENV LANGGRAPH_HTTP='{"app": "/deps/backend/src/agent/app.py:app"}'
ENV LANGSERVE_GRAPHS='{"agent": "/deps/backend/src/agent/graph.py:graph"}'

# Create required directories for LangGraph API
RUN mkdir -p /api/langgraph_api /api/langgraph_runtime /api/langgraph_license /api/langgraph_storage && \
    touch /api/langgraph_api/__init__.py /api/langgraph_runtime/__init__.py /api/langgraph_license/__init__.py /api/langgraph_storage/__init__.py

# Install LangGraph API
RUN PYTHONDONTWRITEBYTECODE=1 pip install --no-cache-dir --no-deps -e /api

# Clean up pip to reduce image size
RUN uv pip uninstall --system pip setuptools wheel && \
    rm -rf /usr/local/lib/python*/site-packages/pip* /usr/local/lib/python*/site-packages/setuptools* /usr/local/lib/python*/site-packages/wheel* && \
    find /usr/local/bin -name "pip*" -delete

WORKDIR /deps/backend

# Add current directory to Python path
ENV PYTHONPATH="/deps/backend:$PYTHONPATH"

# Expose port for LangGraph API
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Start LangGraph API server
CMD ["uvicorn", "src.agent.app:app", "--host", "0.0.0.0", "--port", "8001"]
